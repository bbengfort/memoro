# memoro.settings
# Django base settings for the memoro project.
#
# Author:   Benjamin Bengfort <benjamin@bengfort.com>
# Created:  Sat Nov 28 16:40:07 2020 -0500
#
# Copyright (C) 2020 Bengfort.com
# For license information, see LICENSE
#
# ID: base.py [] benjamin@bengfort.com $

"""
Django base settings for the memoro project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/

For getting settings ready for production, see
https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
"""

##########################################################################
## Imports
##########################################################################

import os
import dj_database_url

from pathlib import Path
from django.contrib.messages import constants as message_constants


##########################################################################
## Paths and Helpers
##########################################################################

# Build paths inside the project like this: PROJECT / 'subdir'.
CONFDIR = Path(__file__).resolve().parent
PROJECT = CONFDIR.parent.parent


def environ_setting(name, default=None):
    """
    Fetch setting from the environment or use default. If default is None then
    raise an ImproperlyConfigured exception.
    """
    if name not in os.environ and default is None:
        from django.core.exceptions import ImproperlyConfigured
        raise ImproperlyConfigured(
            "The {0} ENVVAR is not set.".format(name)
        )

    return os.environ.get(name, default)


def parse_bool(val):
    """
    Attempt to convert an environment variable into a boolean. Recommend using True or
    False as the boolean values but can also use 1 or 0.
    """
    if isinstance(val, str):
        # Try true/false strings
        if val.lower().startswith('f'):
            return False
        if val.lower().startswith('t'):
            return True

        # Try integer strings
        val = int(val)
    return bool(val)


##########################################################################
## Database
##########################################################################

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}

# Make sure we're using psycopg2
DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'


##########################################################################
## Secrets
##########################################################################

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ_setting("SECRET_KEY")

# Used to load Google JS APIs
GOOGLE_JS_API_KEY = environ_setting("GOOGLE_JS_API_KEY")

# Instapaper API Credentials
INSTAPAPER_CONSUMER_ID=environ_setting("INSTAPAPER_CONSUMER_ID")
INSTAPAPER_CONSUMER_SECRET=environ_setting("INSTAPAPER_CONSUMER_SECRET")


##########################################################################
## Runtime
##########################################################################

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = parse_bool(environ_setting("DEBUG", True))

# Specify hosts in production settings
ALLOWED_HOSTS = []
INTERNAL_IPS = ["127.0.0.1"]

# WSGI and ASGI configuration
ROOT_URLCONF = 'memoro.urls'
WSGI_APPLICATION = 'memoro.wsgi.application'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    'markdownify',
    'widget_tweaks',
    'diary',
    'reading',
]

# Request handling
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Map message levels to bootstrap classes
MESSAGE_TAGS = {
    message_constants.DEBUG: "secondary",
    message_constants.INFO: "info",
    21: "primary",
    22: "light",
    23: "dark",
    message_constants.SUCCESS: "success",
    message_constants.WARNING: "warning",
    message_constants.ERROR: "danger",
}


##########################################################################
## Content (Static, Media, Templates)
##########################################################################

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    PROJECT / 'static'
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [PROJECT / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MARKDOWNIFY_WHITELIST_TAGS = [
    'a',
    'abbr',
    'acronym',
    'b',
    'blockquote',
    'em',
    'i',
    'li',
    'ol',
    'p',
    'strong',
    'ul'
]

MARKDOWNIFY_WHITELIST_ATTRS = [
    'href',
    'src',
    'alt',
]

MARKDOWNIFY_MARKDOWN_EXTENSIONS = [
    'markdown.extensions.fenced_code',
    'markdown.extensions.extra',
]


##########################################################################
## Authentication
##########################################################################

LOGIN_URL = '/login/'
LOGIN_ERROR_URL = LOGIN_URL
LOGIN_REDIRECT_URL = '/'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

##########################################################################
## Django REST Framework
##########################################################################

REST_FRAMEWORK = {
    ## API Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),

    ## Default permissions to access the API
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    ## Pagination in the API
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGINATE_BY': 50,
    'PAGINATE_BY_PARAM': 'per_page',
    'MAX_PAGINATE_BY': 200,
}


##########################################################################
## Logging and Error Reporting
##########################################################################

ADMINS = [
    ('Bengfort.com Server', environ_setting("MEMORO_ADMIN_EMAIL", ""))
]

SERVER_EMAIL = environ_setting("SERVER_EMAIL", "")
EMAIL_USE_TLS = True
EMAIL_HOST = environ_setting("EMAIL_HOST", "")
EMAIL_HOST_USER = environ_setting("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = environ_setting("EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = environ_setting("EMAIL_PORT", 587)
EMAIL_SUBJECT_PREFIX = '[Memoro] '
